package config

type NumRangeSt struct {
	From uint16
	To   uint16
}

type LengthMatchSt struct {
	Offset uint16 //长度信息的偏移位置
	Width  uint8  //长度信息存储宽度: u8,u16,u32
	Fixed  uint16 //修正值, -1500~1500
}

type ContentMatchSt struct {
	Type uint8 //模式匹配类型标志位图: 1:HTTP协议负载区匹配, 2:正则搜索, 3:搜索结果ref偏移, 4:反匹配.

	Length uint16 //只匹配这个长度的包, 主要用于OR关系时,提升精度.

	Start  int16  //start,end, 0,0固定位置匹配, n ~ m搜索模式
	End    int16  //-n ~ -m, 倒数指定范围, 从数据包尾部开始倒数 n - m内搜索.
	Search string //uint8 0x11,0x22..., 被搜索的 模式串

	//uint16 
	// 搜索到reference之后偏移多少字节进行固定字段匹配.
	// < 0 表示结束位置,反向匹配.
	Offset int16
	Match  string //uint8 0xab,0xcd.... 字符串表示GET:474554
}

type DpiRuleSt struct {
	Enable  bool
	Id      uint16 //规则识别ID
	AppId   uint16 //应用类型ID
	Memo    string //备注
	Name    string
	AppName string //应用名称.
	AppType string //应用分类.

	BaseRule       bool     //是否从未知状态开始识别.(可能同时依赖其他规则)
	Flags          uint32   //1:P2P用户黑名单,2:P2P服务器黑名单,3:服务器白名单,4:可被学习.
	RefType        uint8    //0:流, 会话内不规则依赖, 1: 同一个用户直接的规则依赖.
	RefRulesName   []string //所依赖的规则(需要转换成ID下发配置).
	ResultProperty uint8
	/*
		certain|uncertain|内置规则|, 
		确定结果:(识别过程结束). 
		不确定结果:(需要继续匹配所有规则,或是被FurtherMatch引用的规则集), 
		内置规则: 不可修改, 用于P2P行为识别, 或是代理控制等需求. 仅仅使用其 RuleId 和 AppId, 无实质性匹配过程. 不随配置下发到匹配引擎.
	*/

	EnableL4Match bool
	Addrs         []string
	Ports         []uint16
	L4Protocol    uint16 //tcp.udp.icmp.all:0

	EnableL7Match bool   //true|false 开启负载数据区匹配
	Dir           uint16 //1:req|2:rep|3:both
	LengthType    uint8  //list|range|match|none
	LengthList    []uint16
	LengthRange   []uint16
	LengthMatch   LengthMatchSt

	EnableContentMatch   bool             //内容匹配
	ContentMatchRelation uint8            //AND,OR
	ContentMatch         []ContentMatchSt //内容匹配,多条规则之间是AND关系.
}

type DpiAppSt struct {
	Id    uint16            //APP 识别ID
	Rules map[string]uint16 //规则名称->规则ID
}

type DpiAppTypeSt struct {
	Id    uint16
	Rules map[string]uint16 //type->rule id
}

type BiParamersSt struct {
	BiCacheTimeout uint64 //结果缓存有效时间

	BiScatterTimeout uint64 //散射特征结点有效时间
	BiScatterTrigger uint32 //散射阈值

	BiParallelTimeout    uint64 //并发连接的统计有效时间
	BiParallelUdpTrigger uint32 //UDP阈值
	BiParallelTcpTrigger uint32 //TCP阈值
}

type DPIConfig struct {
	Flags      uint64 //开关标记位
	BiParamers BiParamersSt
	Rules      map[string]*DpiRuleSt
	Apps       map[string]*DpiAppSt     //应用规则: map[app_type]app_rule
	AppTypes   map[string]*DpiAppTypeSt //应用分类: AppType

	inited     bool //初始化
	id2Name    map[uint16]string
	id2AppName map[uint16]string
	id2AppType map[uint16]string
}
