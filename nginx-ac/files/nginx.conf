
user nobody nogroup;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  /tmp/error.log  error;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    #default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    #lua_package_path "/usr/lib/lua/?.lua;/usr/share/nginx/?.lua;;";
    lua_package_path "/usr/share/nginx/?.lua;;";
    #lua_package_cpath "/usr/lib/lua/?.so;;"; 
    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /mysql {
        	chunked_transfer_encoding off;
            content_by_lua_block {
            	local js = require("cjson.safe")
            	local cache = require("common.rpccache")
            	local function reply(d)
					ngx.print(type(d) == "table" and js.encode(d) or d)
				end

                ngx.req.read_body()
                local s = ngx.req.get_body_data()
                if not s then 
                	return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
               	-- ngx.log(ngx.ERR, "xxxxxxxxxx", s)
                local rpc = js.decode(s)
                if not rpc then 
                	return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end

               	local k, p, bt = rpc.k, rpc.p, rpc.f
               	if bt then
               		ngx.log(ngx.ERR, "loadstring ", bt)
	                local f, e = loadstring(bt)
					if not f then
						return reply({d = e, e = 1})
					end
                	cache.set(k, f)
                end

                local f = cache.get(k)
                -- ngx.log(ngx.ERR, "xfffffffffffff", ngx.ctx.arg)
				if not f then
					return reply({d = "miss", e = 1})
				end

				ngx.ctx.arg = p
				local r, e = f()
				if not r then 
	                return reply({d = e, e = 1})
	            end
	            reply({d = r})
            }
        }
    }
    lua_shared_dict vip 1m;
}
