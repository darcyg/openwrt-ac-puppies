
user root root;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    sendfile on;
    keepalive_timeout 65;
    lua_package_path '/tmp/userauth/lua/?.lua;;';
    lua_package_cpath '/tmp/userauth/lua/?.so;;';
    lua_shared_dict auth_status 2m;
    init_by_lua_block {
        cjson = require 'cjson'

        function is_sniffing_request(ngx)
            if ngx.var.host == 'captive.apple.com' then
                return true
            end
            return false
        end

        function sniffing_need_proxypass(ngx)
            local as = ngx.shared.auth_status
            if as:get('sniffing:' .. ngx.var.remote_addr) == 1 then
                return true
            end
            return false
        end

        function sniffing_set_proxypass(ngx)
            local as = ngx.shared.auth_status
            as:set('sniffing:' .. ngx.var.remote_addr, 1, 6)
        end

        function request_need_proxypass(ngx)
            if is_sniffing_request(ngx) and sniffing_need_proxypass(ngx) then
                return true
            end
            return false
        end
        function client_key_store(key, value, timeout)
            local as = ngx.shared.auth_status
            as:set(key .. ngx.var.remote_addr, value, timeout)
        end
        function client_key_get(key)
            local as = ngx.shared.auth_status
            return as:get(key)
        end
        function get_client_macaddr(ngx)
            for p in io.lines("/proc/net/arp") do
                if p:find(string.format('^(%s )', ngx.var.remote_addr), 1, false) ~= nil then
                    local macaddr = p:sub(42, 58)
                    if #macaddr == 17 then
                        return macaddr
                    end
                end
            end
            return nil
        end
        function set_user_online(aid, ip, mac, timeout)
            if mac == 'ff:ff:ff:ff:ff:ff' then
                os.execute(string.format('ipset del auth_online_list%s %s; ipset add auth_online_list%s %s timeout %s', aid, ip, aid, ip, timeout))
            else
                os.execute(string.format('ipset -exist add auth_online_list%s %s,%s timeout %s', aid, ip, mac, timeout))
            end
        end
        function check_user_online(aid, ip)
            return (os.execute(string.format('ipset test auth_online_list%s %s', aid, ip)) == 0)
        end
        wechatinfo = require 'wechatinfo'
        function get_wechat_info(aid)
            aid = tonumber(aid)
            if not aid then
                return nil
            end
            return wechatinfo[aid + 1]
        end
    }
    server {
        listen 8000;
        server_name localhost;
        location / {
            root /tmp/userauth/www;
            index index.html;
        }
        location ~ /auth-new {
            if_modified_since off;
            etag off;
            content_by_lua_block {
                sniffing_set_proxypass(ngx)
                ngx.header['Cache-Control'] = 'no-cache, no-store, must-revalidate, pre-check=0, post-check=0'
                ngx.header['Content-Type'] = 'application/json'
                ngx.header['Expires'] = 'Tue, 03 Jul 2001 06:00:00 GMT'
                ngx.header['Last-Modified'] = ngx.http_time(ngx.time())
                ngx.header['Pragma'] = 'no-cache'
                ngx.say(cjson.encode({success = true, data = ""}))
            }
        }
        location ~ /auth-wechat-info {
            if_modified_since off;
            etag off;
            content_by_lua_block {
                ngx.header['Cache-Control'] = 'no-cache, no-store, must-revalidate, pre-check=0, post-check=0'
                ngx.header['Content-Type'] = 'application/json'
                ngx.header['Expires'] = 'Tue, 03 Jul 2001 06:00:00 GMT'
                ngx.header['Last-Modified'] = ngx.http_time(ngx.time())
                ngx.header['Pragma'] = 'no-cache'
                local macaddr = get_client_macaddr(ngx) or 'ff:ff:ff:ff:ff:ff'
                local args = ngx.req.get_uri_args()
                if not args or not args.aid then
                    ngx.say(cjson.encode({
                        success = false,
                        data = 'invalid arguments'
                    }))
                    ngx.exit(ngx.HTTP_OK)
                end
                local info = get_wechat_info(args.aid)
                if not info then
                    ngx.say(cjson.encode({
                        success = false,
                        data = 'invalid arguments: aid'
                    }))
                    ngx.exit(ngx.HTTP_OK)
                end
                local timestamp = ngx.time() * 1000
                local sign = ngx.md5(string.format('%s%s%s%s%s%s', args.aid, ngx.var.remote_addr, macaddr, timestamp, info.ssid, info.secretKey))
                local extend = string.format('%s,%s,%s,%s,%s,%s,', args.aid, ngx.var.remote_addr, macaddr, timestamp, info.ssid, sign)
                if args.url and #args.url > 0 then
                    local url = ngx.escape_uri(args.url)
                    local new_extend = string.format('%s%s,', extend, url)
                    if #ngx.escape_uri(new_extend) <= 300 then
                        extend = new_extend
                    end
                end
                sign = ngx.md5(string.format('%s%s%s%s%s%s%s%s', info.appId, extend, timestamp, info.shopId, info.authUrl, macaddr, info.ssid, info.secretKey))
                local data = {
                    appId = info.appId,
                    extend = extend,
                    timestamp = timestamp,
                    sign = sign,
                    shopId = info.shopId,
                    authUrl = info.authUrl,
                    mac = macaddr,
                    ssid = info.ssid,
                    bssid = '',
                }
                set_user_online(args.aid, ngx.var.remote_addr, macaddr, 30)
                ngx.say(cjson.encode({
                    success = true,
                    data = data
                }))
                ngx.exit(ngx.HTTP_OK)
            }
        }
        location ~ /auth-wechat-login {
            if_modified_since off;
            etag off;
            content_by_lua_block {
                ngx.header['Cache-Control'] = 'no-cache, no-store, must-revalidate, pre-check=0, post-check=0'
                ngx.header['Content-Type'] = 'text/html'
                ngx.header['Expires'] = 'Tue, 03 Jul 2001 06:00:00 GMT'
                ngx.header['Last-Modified'] = ngx.http_time(ngx.time())
                ngx.header['Pragma'] = 'no-cache'
                local args = ngx.req.get_uri_args()
                if not args or not args.extend then
                    ngx.log(ngx.ALERT, 'invalid arguments')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                local extend = {}
                for w in args.extend:gmatch('([^,]*),') do
                    table.insert(extend, w)
                end
                if #extend < 6 then
                    ngx.log(ngx.ALERT, 'invalid arguments: extend')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                extend[4] = tonumber(extend[4]) or 0
                local timestamp = ngx.time() * 1000
                local timeoff = timestamp - extend[4]
                if timeoff < 0 or timeoff > 180 * 1000 then
                    ngx.log(ngx.ALERT, 'invalid timestamp')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                local info = get_wechat_info(extend[1])
                if not info then
                    ngx.log(ngx.ALERT, 'no wechatinfo')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                local sign = ngx.md5(string.format('%s%s%s%s%s%s', extend[1], extend[2], extend[3], extend[4], extend[5], info.secretKey))
                if sign ~= extend[6] then
                    ngx.log(ngx.ALERT, 'invalid sign for extend')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                set_user_online(extend[1], extend[2], extend[3], 14400)
                local file = '/tmp/userauth/www/login-success.html'
                local f = io.open(file, 'rb')
                local content = f:read('*all')
                f:close()
                if extend[7] then
                    ngx.log(ngx.ALERT, 'extend7=' .. extend[7])
                    extend[7] = ngx.unescape_uri(extend[7]) or 'http://news.baidu.com/'
                    content = content:gsub('(var redirect_url = ")(.*)(";)', function(a, b, c) return a .. extend[7] .. c end, 1)
                end
                ngx.print(content)
                ngx.exit(ngx.HTTP_OK)
            }
        }
        location ~ /(index.html|login.html|pc-login.html)$ {
            if_modified_since off;
            etag off;
            root /tmp/userauth/www;
            add_header Expires 'Tue, 03 Jul 2001 06:00:00 GMT';
            add_header Cache-Control 'no-cache, no-store, must-revalidate, pre-check=0, post-check=0';
            add_header Pragma 'no-cache';
            add_header Last-Modified $date_gmt;
        }
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /tmp/userauth/www;
        }
    }
# leave blank below
